from aiogram import types
from loader import dp
from keyboards.default.keyboard_menu import wndrbl_menu, promo_menu, kb_menu
from keyboards.inline.inline import create_w_menu
from utils.misc import rate_limit
from utils.dbapi import quick_commands
from aiogram.dispatcher import FSMContext
from states.withdrawal_state import WithdrawalState


@rate_limit(limit=15)
@dp.message_handler(text='üì§ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤')
async def withdrawal_menu(message: types.Message):
    user = await quick_commands.select_user(message.from_user.id)
    if user.status == 'active':
        user_withdrawal = await quick_commands.faunds_withdrawal(user_id=message.from_user.id)
        if user_withdrawal == False:
            await message.answer(f'<strong>–¢–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:</strong>\n'
                                 f'¬∑ –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤', parse_mode='html', reply_markup=wndrbl_menu)

        else:
            await message.answer(f'<strong>–¢–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:</strong>\n'
                                 f' ¬∑ ID –∑–∞—è–≤–∫–∏: <code>{user_withdrawal.id}</code>\n'
                                 f' ¬∑ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: <code>{user_withdrawal.amount}‚ÇΩ</code>\n'
                                 f' ¬∑ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: <code>–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ ‚åõ</code>\n', parse_mode='html', reply_markup=kb_menu)
    if user.status == 'ban':
        await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –º–∞—Ö–∏–Ω–∞—Ü–∏–∏')

@dp.message_handler(text='üîô –í–µ—Ä–Ω—É—Ç—å—Å—è')
async def back_men(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb_menu)

@dp.message_handler(text='üì≤ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
async def withdrawal_create(message: types.Message):
    user = await quick_commands.select_user(message.from_user.id)
    if user.status == 'active':
        await message.answer('<strong>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥!</strong>\n'
                       '–í—ã–±–µ—Ä–µ—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:\n', reply_markup=create_w_menu)
    if user.status == 'ban':
        await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –º–∞—Ö–∏–Ω–∞—Ü–∏–∏')

@dp.callback_query_handler(text='qiwi')
async def create_withdrawal(callback: types.CallbackQuery):
    user = await quick_commands.select_user(callback.from_user.id)
    if user.status == 'active':
        await callback.message.delete()
        await callback.message.answer('<strong>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ Qiwi!</strong>\n'
                                      '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä Qiwi:', reply_markup=promo_menu)
        await WithdrawalState.qiwi.set()
    if user.status == 'ban':
        await callback.message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –º–∞—Ö–∏–Ω–∞—Ü–∏–∏')

@dp.message_handler(state=WithdrawalState.qiwi)
async def wth_qiwi(message: types.Message, state: FSMContext):
    async with state.proxy() as qiwi_n:
        qiwi_n['qiwi'] = message.text
        if qiwi_n['qiwi'] == 'üîô –ù–∞–∑–∞–¥':
            await state.finish()
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb_menu)
        else:
            await message.answer('<strong>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞</strong>(–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ 500‚ÇΩ)', reply_markup=promo_menu)
            await WithdrawalState.amount.set()

@dp.message_handler(state=WithdrawalState.amount)
async def wth_qiwi(message: types.Message, state: FSMContext):
    user = await quick_commands.select_user(message.from_user.id)
    async with state.proxy() as qiwi_n:
        qiwi_n['amount'] = message.text
        am = qiwi_n['amount'].isdigit()
        if qiwi_n['amount'] == 'üîô –ù–∞–∑–∞–¥':
            await state.finish()
        if am == False:
                        if qiwi_n['amount'] == 'üîô –ù–∞–∑–∞–¥':
                            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb_menu)
                            await state.finish()
                        else:
                            await message.answer(f'–°—É–º–º—É –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏!\n'
                                                 f'<strong>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞</strong>(–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ 500‚ÇΩ)', reply_markup=promo_menu)
        if am == True:
            if int(qiwi_n['amount']) >= 500:
                if user.balance >= int(qiwi_n['amount']):
                    await state.finish()
                    await quick_commands.create_withdrawal(user_id=message.from_user.id, amount=int(qiwi_n['amount']), requisites=qiwi_n['qiwi'])
                    await message.answer(f'<strong>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</strong>\n'
                                            f'–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ <strong>–æ—Ç 1 —á–∞—Å–∞ –¥–æ 3 –¥–Ω–µ–π</strong>', reply_markup=kb_menu)
                if user.balance < int(qiwi_n['amount']):
                    await message.answer(f'–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã!', reply_markup=kb_menu)
                    await state.finish()
            if int(qiwi_n['amount']) <= 499:
                            await message.answer(f'<strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 500‚ÇΩ!</strong>\n'
                                                 f'–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –æ—Ç 500‚ÇΩ:', reply_markup=promo_menu)
                            if qiwi_n['amount'] == 'üîô –ù–∞–∑–∞–¥':
                                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb_menu)
                                await state.finish()
